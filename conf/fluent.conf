#================================Jmeter================================ 
<source>
  @type tail
  path /jmeter-logs/*.jtl
  read_from_head true
  tag jmeter.*
  format csv
  rotate_wait "#{ENV['ROTATE_WAIT']}"
  read_lines_limit "#{ENV['READ_LINES_LIMIT']}"
  keys timeStamp,elapsed,label,responseCode,responseMessage,threadName,dataType,success,failureMessage,bytes,sentBytes,grpThreads,allThreads,Latency,IdleTime,Connect
  types timeStamp:string,elapsed:integer,label:string,reponseCode:integer,responseMessage:string,threadName:string,dataType:string,success:bool,failureMessage:string,bytes:integer,sentBytes:integer,grpThreads:integer,allThreads:integer,Latency:integer,IdleTime:integer,Connect:integer
</source>



<filter gatling.**>
    @type grep
    <exclude>
      key label
      pattern label
    </exclude>
</filter>
<filter jmeter.**>
  @type record_transformer
  enable_ruby true
  <record>
  testName ${record["threadName"].gsub(/\s+\d+-\d+/, '')}
  </record>
</filter>
<filter jmeter.**>
  @type record_modifier
  <record>
    timeStamp ${Time.at(record['timeStamp'].to_i/1000, record['timeStamp'].to_i%1000*1000).utc.strftime('%Y-%m-%dT%H:%M:%S.%LZ')}
    env "#{ENV['TEST_ENV']}"
  </record>
</filter>

#<match pattern jmeter.**>
#    @type stdout
#</match>

<match pattern jmeter.**>
  @type kinesis_firehose
  delivery_stream_name "#{ENV['JMETER_LOG_STREAM']}"
  region us-east-1
</match>



#=========================Gatling====================== 
<source>
    @type tail
    read_from_head true
    path /gatling-logs/**/*.log
    rotate_wait "#{ENV['ROTATE_WAIT']}"
    read_lines_limit "#{ENV['READ_LINES_LIMIT']}"
    keys type,scenario_name,user_id,basicsimulation,request_name,request_start,request_end,status,last_param
    types type:string,scenario_name:string,user_id:integer,basicsimulation:string,request_name:string,request_start:integer,request_end:integer,status:string,last_param:string
    tag gatling.*
    format tsv
</source>


<filter gatling.**>
    @type grep
    <exclude>
      key type
      pattern RUN|USER|END
    </exclude>
</filter>

<filter gatling.**>
    @type record_transformer
    enable_ruby
    <record>
        response_time ${record["request_end"] - record["request_start"]}
    </record>
</filter>
<filter gatling.**>
  @type record_modifier
  <record>
    timeStamp ${Time.at(record['request_start'].to_i/1000, record['request_start'].to_i%1000*1000).utc.strftime('%Y-%m-%dT%H:%M:%S.%LZ')}
    env "#{ENV['TEST_ENV']}"
  </record>
</filter>
<filter gatling.**>
    @type record_transformer
    enable_ruby
    <record>
        status ${record["status"] == "OK" ? true : false}
    </record>
</filter>
<filter gatling.**>
    @type record_transformer
    remove_keys ["request_start", "request_end", "basicsimulation", "type"]
</filter>

#<match pattern gatling.**>
#    @type stdout
#</match>

<match pattern gatling.**>
  @type kinesis_firehose
  delivery_stream_name "#{ENV['GATLING_LOG_STREAM']}"
  region us-east-1
</match>
